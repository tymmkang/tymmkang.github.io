[{
    "title": "게임회사 기술 면접 복기 02",
    "date": "2020-09-04",
    "description": "모바일 클라이언트 개발",
    "body": "지원한 회사는 자사 IP를 이용하여 신규 모바일 게임을 개발하는 회사이다. 면접은 2대 1 면접이었으며, 수도권 코로나-19로 인해 화상으로 진행되었다.\n최근 진행한 면접으로, 아직 결과를 모른다. 합불 여부가 결정되면 포스팅하겠다.\n대답하지 못한 내용 \u0026hellip;\n치명적 실수 \u0026hellip;\n긍정적 반응 \u0026hellip;\n미적지근한 반응 \u0026hellip;\n",
    "ref": "/blog/post_2020_09_04_00_%EB%A9%B4%EC%A0%91%EB%B3%B5%EA%B8%B0-02/"
  },{
    "title": "포트폴리오 계획",
    "date": "2020-08-06",
    "description": "게임 클라이언트 개발 직군 중점",
    "body": "취업 준비가 길어질 것을 대비 해야 할 것 같다. 취업 준비 기간동안 개발할 포트폴리오 계획을 포스팅한다.\n근황 여러번 면접을 보고 떨어져보면서 기초가 부족하다는 생각이 자주 들었다. 그러한 점을 보완하기위한 학습을 병행하고 있으며, GitHub리포지토리에 그런 학습을 기록해나가고 있다.\n하지만 학습에 치여 포트폴리오를 등한시 하면 문제가 될 수도 있다. 특히 이러한 취준 기간이 길어진다면 이미 떨어졌던 회사에 재지원 할 수도 있다. 그런 상황에서 면접관이 재지원자라는 것을 인지하고, 이전 지원과 비교해 보았을 때 변화가 보이지 않는다면 면접때 안좋은 인상을 주게 될 것이다.\n본인은 게임 클라이언트 개발자를 목표로 하고 있기 때문에 네트워크쪽이 많이 부실했다. 하지만 조금만 생각해보면 클라이언트 역시 서버와 통신을 해야하는 것이고, 당연히 소켓 네트워크 정도는 알고 갔어야했다. 최근에는 앞서 말한 리포지토리에 소켓 네트워크와, 중첩 입출력, IOCP 등을 구현 해 보았다.\n또한 컴퓨터 그래픽스분야는 자신 있었는데, 면접에서 파이프라이닝, 쉐이딩, 렌더링 기법 등은 무난하게 질문에 답변했었으나 AABB/OBB, kd-tree 등 최적화를 위한 공간분할 부분에 부실했다는 점을 알게되었다.\n계획 가장 클래식하면서 잘 알려진 게임 2종을 만들어보고자 한다.\n 핑퐁 테트리스  단 조건이 있다.\n  렌더링 API를 활용할 것\n가장 최근에 Vulkan API를 사용했기 때문에 이를 이용한 라이브러리를 만들것이다. 특히 공간분할과 관련된 기능을 꼭 구현해볼 것이다.\n  적어도 2인 네트워크 플레이가 가능 할 것\nWinSock 기반으로 만들어보려고 한다. 완성하고 만약 멀티플랫폼 욕심이 난다면 Boost.Asio도 써보면 좋을 것 같다.\n  학부 1학년정도에 만들 수 있는 콘솔에서 동작하는 그런 결과물은 지양한다.\n그외\u0026hellip; 일반적으로 규모와 체계가 갖춰진 회사는 특정 플랫폼이나 엔진에 종속 된 포트폴리오보다 기초에 충실한 포트폴리오를 원하는 경향이 있다. 물론 엔진 포트폴리오가 있다면 없는거보단 낫다. 위 포트폴리오를 다 만들면 유니티로 멀티플레이 게임을 하나 만들어보려고 한다.\n",
    "ref": "/blog/post_2020_07_20_00_%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4_%EA%B3%84%ED%9A%8D/"
  },{
    "title": "게임회사 기술 면접 복기 01",
    "date": "2020-07-28",
    "description": "클라이언트 기술 개발 직군",
    "body": "지원한 회사는 도트 스타일의 2D 벨트스크롤 액션 RPG 게임을 서비스하고 있다. 면접은 6대 1 면접이었다. 단 한명은 질문은 안하고 랩탑으로 타이핑만 계속 했던것으로 보아 서기에 가까웠다.\n대답하지 못한 내용 1. AABB, OBB를 이용한 충돌 체크 해 보았는가 구현 해 보았다고 답했는데, 그 후속 질문으로써 계층구조를 어떻게 구현했는지에 대해 물어봤다. 계층구조까지는 구현해 보지 않았다고 답하였다. 후속 질문의 경우 안해봤다는 답변보다 해보지는 않았으나 Octree 자료구조를 예시로 들면서 구현 계획을 말했으면 좋았을 것이다.\nAABB (Axis-Aligned-Bounding-Box)란 경계 박스가 x, y, z축에 정렬되어있다. 각 축마다 겹치는지 검사하여모든 값이 전무 겹치면 충돌이다.\nOBB (Object-Bounding-Box)란 경계 박스가 물체의 회전에 따라 함께 회전한다. 분리축 이론(SAT)을 기반으로 하며, 각 분리축별로 투영을 수행하여 충돌을 체크한다. 분리축 별 투영 결과가 모두 겹치면 충돌이다.\n AABB는 OBB보다 빠르다, OBB는 AABB보다 정확하다. 상호 보완하여 사용해야 한다.\n 2. 크리티컬 섹션(동기화 객체)에 대해 설명해보라 이 질문의 경우 동기화 객체 세개를 설명해보라는 질문이 먼저 있었다. 뮤텍스와 세마포어를 대답하였고, 나머지 하나는 잘 모르겠어서 CAS를 사용해서 구현할 수 있을 것 같다고 대답하였다(1차 동문서답). 그 후 면접관이 크리티컬 섹션에 대해 설명해 보라고 하였는데, 나는 크리티컬 섹션에 대해 경합이 일어날 수 있는 코드 구간이라고 답변하였고(2차 동문서답), 면접관이 뮤텍스와 크리티컬 섹션의 차이에 대해 알려달라는 구체적인 질문을 통해 크리티컬 섹션이 임계영역이 아닌 뮤텍스, 세마포어같은 동기화 객체라는 것을 알아챘다. 동기화 객체로써의 크리티컬 섹션은 알지 못하는 내용이었기에 모른다고 답하였다.\n크리티컬 섹션이란? 마이크로소프트에서 지원하는 동기화 객체. 임계영역을 의미하는 용어와 똑같으니 혼동에 주의할 것. 기본적인 역할은 뮤텍스와 비슷하지만 다음과 같은 차이가 있다.\n  커널 객체를 사용하지 않는다. 따라서 속도가 좀 더 빠르다. 서로 다른 프로세스간에 접근이 불가능하다.   3. IOCP 해 보았는가 안해봤다. 속수무책인 질문이었다.\nIOCP(Input/Output Completion Port)란 IO 작업을 수행하기위한 복수의 쓰레드를 생성하고, 생성된 쓰레드들의 동작과 휴식을 운영체제가 관리한다. 운영체제의 직접적인 관리를 통한 컨텍스트 스위칭의 최소화가 가장 큰 이점이다. IOCP에 관해서는 추후 실제로 구현해보고 포스팅하겠다.\n참고로 안해봤다고 답변한 것에 대해 면접관들이 부정적인 반응을 보이지는 않았다. 오히려 깔끔하게 안해봤다고 답변했던건 정답이었을지도 모르겠다.\n치명적 실수 1. 가상함수를 가진 클래스 인스턴스에 memset 함수를 사용하여 값을 설정하면 어떤일이 일어나는가? 이 질문의 의도는 vtable의 존재를 아는지에 대한 것이다. 오버라이딩 하지 않는 가상함수가 포함된 클래스의 경우 vtable을 가리키는 숨겨진 포인터 변수가 첫번째 맴버로 존재한다고 생각하면 된다. 나는 vtable의 존재를 알고있었고, 어떤식으로 동작하는지도 알고있었다.\n문제는 질문에대한 나의 답변인데, \u0026ldquo;memset을 하려면 시작부분의 8바이트는 건너뛰고 수행해야한다\u0026rdquo; 라는 너무나도 결점이 많은 답변을 하고 만 것이다. 저 답변은 임의의 클래스가 64비트 환경에서 다른 클래스의 서브 클래스가 아니라면 유효한 답변이다. 아래의 답변 정도였으면 충분했을 것이다.\n 가상함수가 존재하는 클래스에 memset을 수행하면 vtable을 가리키는 포인터까지 수정되어버리기 때문에 다음 가상함수 호출때 오류가 발생 할 수 있다.\n 답변을 들은 면접관의 (띠용?) 표정이 아직도 눈에 선하다. 정말 긍정적으로 생각하면 질문의 의도인 vtable의 존재를 아는지는 확인 할 수 있는 답변이 되었기 때문에 정상참작의 가능성이 있었으나 다음 질문에서 그러한 정상참작의 가능성을 모조리 날려버리는 실수를 한다.\n2. 32bit 시스템에서의 사용 할 수 있는 최대 메모리 용량은? 이 질문을 들었을 때 의도를 파악하지 못했다. 다름이 아니라 이미 가상메모리, 페이징, 세그멘테이션 등 운영체제의 메모리 관련 질문은 한참전에 받았기 때문에 해당 질문만 뚝 떨어져서 거의 마지막에 나온것이 당황스러웠다. 무엇보다 이전 memset 질문에 대한 답변의 오류를 내가 인지하지 못한것이 컸다. 이 질문의 의도는 \u0026ldquo;너 혹시 포인터 제대로 모르고있는건 아니지? 야 너 정말 여기까지 와가지고 그러면 곤란해?\u0026quot; 였다.\n그리고 아주 허접한 답변을 하는데, \u0026ldquo;2의 32승 바이트만큼이지 않을까요?\u0026rdquo; 라는 답변을 하고만다. 2의 32승 바이트(4기가바이트) 맞다. 문제는 질문에 대해 질문으로 답변한 것이다. 필시 기본적인 CS 지식에 대해 확신을 가지지못한 지원자처럼 보였을 것이다.\n긍정적 반응 1. 홀펀칭에 대해 설명 해 보아라 서로 다른 사설 네트워크 내부의 두 클라이언트 만으로는 통신이 불가능하다는 점을 먼저 말하고, 두 클라이언트와 공개된 서버간의 통신을 통해 NAT 테이블에 인바운드를 허용하도록 조작, 그후 클라이언트들 끼리 통신이 가능하다고 설명하였다. 느리지도 빠르지도 않은 막힘없는 설명이 좋은 모습으로 비춰졌던 것 같다.\n2. 포워드 렌더링 vs 디퍼드 렌더링 10개의 오브젝트를 그린다는 예시를 들어 설명했다. 포워드 렌더링의 경우 렌더링 파이프라인을 10번 반복하여 하나의 프레임 버퍼에 그려내는 것이라고 설명했다. 그와중에 뎁스 테스트 통해 가려지는지 여부도 확인한다고 부연설명을 붙였다. 디퍼드 렌더링의 경우 포워드 렌더링과는 달리 여러개의 용도별 버퍼가 있고, 용도별 버퍼의 쓰기가 모두 수행되면 이를 통합하여 장면을 렌더링한다고 설명했다. 반응이 괜찮아서 크게 신경쓰지는 않았지만, 면접 후에 생각해보니 많이 부족한 답변이었다. 라이팅 측면에서 두가지를 비교했어야 했고, 디퍼드의 경우 투명한 오브젝트에 대해서는 어려움이 있다는 부연설명을 했으면 더 좋았을 것이다.\n미적지근한 반응 1. 가상함수의 용도 나의 답변은 \u0026ldquo;다형성을 구현하기위해 사용한다\u0026rdquo;, \u0026ldquo;상위 클래스의 구현 책임을 하위 클래스로 떠넘 길 수 있다\u0026rdquo; 였는데 영 반응이 시원찮았다. 틀린 답변은 아니었던 것 같은데 어떤 답변을 원했던 것일까? 어쩌면 virtual 키워드 자체를 물어본 것이었을지도?\n2. TCP/UDP 차이 TCP : 신뢰성, 순서 보장, 점대점연결, 연결 수립 필요\nUDP : 유실될 수 있음, 순서보장 x, 연결 수립 필요 x\n추가 질문으로 UDP 드랍을 어떻게 감지하냐는 질문이 있었는데, 해당 질문에 대해서는 지식이 없었다. 오답이라도 던져보자는 생각으로 UDP에도 체크섬이 있으니 이를 사용하면 될 것 같다고 답변했다. 추가 질문하신 면접관분은 끄덕이면서 넘어갔지만, 체크섬은 변조를 확인하기 위한 것이지, 드랍은 확인 할 수 없다. 아마 \u0026lsquo;이 지원자는 네트워크는 이정도 수준이군\u0026rsquo; 정도로 받아들였을 가능성이 크다. (서버 직군이었으면 절래절래였을수도\u0026hellip;) UDP의 기본적인 기능에 국한하여 해결책을 제시 할 것이 아니라, 소켓으로 송수신되는 페이로드를 활용한 해결책을 제시 할 수 있었다면 좋았을 것 같다.\nUDP의 경우 멀티케스트, 유니케스트도 말했으면 좋았을 것 같다.\n3. RTTI가 뭔지 아는가? C++에서 RTTI가 어떤식으로 동작하는가? 처음 질문에는 리플렉션이라고 답하였다. 꼬리 질문이 어떤식으로 동작하는지 물어본 것이었다. 처음에는 다이나믹케스트나 타입아이디 같은 기능들을 사용한다고 답했지만 사용 방식이 아니라 어떤식으로 동작하는지에 대한 질문이었다. 이거는 구글링해도 뚜렷한 답이 안나온다. 면접관도 그냥저냥 넘어갔다. 이런 질문은 정말 정답이 뭔지 물어보고싶다.\n",
    "ref": "/blog/post_2020_07_28_00_%EB%A9%B4%EC%A0%91%EB%B3%B5%EA%B8%B0-01/"
  },{
    "title": "윈도우 C++ 문자열 인코딩",
    "date": "2020-07-21",
    "description": "윈도우 환경에서 C++만을 사용하여 RESTful API를 사용해야하는 경우 인코딩이 문제가 될 수 있다. 이를 해결하기위한 함수를 포스팅한다.",
    "body": " C++ 문자열 인코딩 며칠 전 C++에서 HTTPS 리퀘스트를 송신해야 했었다.\n본인은 MSVC 멀티바이트 환경에서 구현했기 때문에. 필요했던 함수는 Multibyte, UTF-8 간 변환과, UTF-8 문자열을 URL 포맷에 맞도록 인코딩해주는 함수였다.\n MB2U8 (Multibyte -\u0026gt; UTF-8) U82MB (UTF-8 -\u0026gt; Multibyte) EncodeForURL (UTF-8 -\u0026gt; URL format)  구현한 함수 중 MB2U8과, U82MB 함수에서 첫 번째 파라미터로 전달된 std::string은 사실상 바이트 버퍼로 취급된다. 즉 std::string이라고 내부 버퍼에 1byte로 표현되는 문자들만 있는 것이 아니다. 이렇게 구현한 이유는 표준입출력을 통해 바로 콘솔에 출력하고 싶어서이다.\nMultibyte -\u0026gt; UTF-8 #include \u0026lt;string\u0026gt;#include \u0026lt;windows.h\u0026gt;// ... bool MB2U8(const std::string\u0026amp; mbStr, std::string* pRefU8Str) { size_t mbLen = ::MultiByteToWideChar(CP_ACP, 0, mbStr.data(), mbStr.size(), NULL, 0); if (mblen \u0026lt;= 0) return false; std::wstring ws(mbLen, 0); mbLen = ::MultiByteToWideChar(CP_ACP, 0, mbStr.data(), mbStr.size(), const_cast\u0026lt;wchar_t*\u0026gt;(ws.data()), mbLen); size_t u8Len = ::WideCharToMultiByte(CP_UTF8, 0, ws.data(), ws.size(), NULL, 0, NULL, NULL); if (u8Len \u0026lt;= 0) return false; pRefU8Str-\u0026gt;resize(u8Len, 0); u8Len = ::WideCharToMultiByte(CP_UTF8, 0, ws.data(), ws.size(), const_cast\u0026lt;char*\u0026gt;(pRefU8Str-\u0026gt;data()), u8Len, NULL, NULL); return true; } UTF-8 -\u0026gt; Multibyte #include \u0026lt;string\u0026gt;#include \u0026lt;windows.h\u0026gt;// ... bool U82MB(const std::string\u0026amp; u8Str, std::string* pRefMbStr) { size_t u8Len = ::MultiByteToWideChar(CP_UTF8, 0, u8Str.data(), u8Str.size(), NULL, 0); if (u8Len \u0026lt;= 0) return false; std::wstring ws(u8Len, 0); u8Len = ::MultiByteToWideChar(CP_UTF8, 0, u8Str.data(), u8Str.size(), const_cast\u0026lt;wchar_t*\u0026gt;(ws.data()), u8Len); size_t mbLen = ::WideCharToMultiByte(CP_ACP, 0, ws.data(), u8Len, NULL, 0, NULL, NULL); if (mbLen \u0026lt;= 0) return false; pRefMbStr-\u0026gt;resize(mbLen, 0); mbLen = ::WideCharToMultiByte(CP_ACP, 0, ws.data(), u8Len, const_cast\u0026lt;char*\u0026gt;(pRefMbStr-\u0026gt;data()), mbLen, NULL, NULL); return true; } UTF-8 -\u0026gt; URL format #include \u0026lt;string\u0026gt;#include \u0026lt;sstream\u0026gt;// ... std::string EncodeForURL(const std::string\u0026amp; value) { std::stringstream ss; char hexTemp[3]; unsigned char c = 0; for (size_t i = 0; i \u0026lt; value.size(); i++) { c = static_cast\u0026lt;unsigned char\u0026gt;(value[i]); if ((c \u0026gt;= \u0026#39;0\u0026#39;) \u0026amp;\u0026amp; (c \u0026lt;= \u0026#39;9\u0026#39;)) ss \u0026lt;\u0026lt; c; else if (c == \u0026#39; \u0026#39;) ss \u0026lt;\u0026lt; \u0026#39;+\u0026#39;; else if ((c \u0026gt;= \u0026#39;A\u0026#39;) \u0026amp;\u0026amp; (c \u0026lt;= \u0026#39;Z\u0026#39;)) ss \u0026lt;\u0026lt; c; else if ((c \u0026gt;= \u0026#39;a\u0026#39;) \u0026amp;\u0026amp; (c \u0026lt;= \u0026#39;z\u0026#39;)) ss \u0026lt;\u0026lt; c; else if ((c == \u0026#39;@\u0026#39;) || (c == \u0026#39;.\u0026#39;) || (c == \u0026#39;/\u0026#39;) || (c == \u0026#39;\\\\\u0026#39;) || (c == \u0026#39;-\u0026#39;) || (c == \u0026#39;_\u0026#39;) || (c == \u0026#39;:\u0026#39;))\tss \u0026lt;\u0026lt; c; else ss \u0026lt;\u0026lt; \u0026#39;%\u0026#39; \u0026lt;\u0026lt; std::hex \u0026lt;\u0026lt; (int)c; } return ss.str(); } ",
    "ref": "/blog/post_2020_07_21_00_%EC%9C%88%EB%8F%84%EC%9A%B0_c++_%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9D%B8%EC%BD%94%EB%94%A9/"
  },{
    "title": "테스트 포스팅",
    "date": "2020-07-20",
    "description": "Korean test",
    "body": "테스트 포스팅 테스트 용도의 포스팅입니다.\n",
    "ref": "/blog/post_2020_07_20_00_test/"
  },{
    "title": "About",
    "date": "2019-02-28",
    "description": "Hugo, the world’s fastest framework for building websites",
    "body": "Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "0001-01-01",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
